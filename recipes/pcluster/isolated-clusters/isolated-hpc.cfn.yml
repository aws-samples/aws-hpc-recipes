Description: Isolated Cluster without AD Integration

Parameters:
  ParallelClusterEC2InstanceAmiId:
    Description: AMI for the ParallelClusterAdminNode
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'
  
  Keypair:
    Description: EC2 Keypair to access ParallelClusterAdminNode
    Type: AWS::EC2::KeyPair::KeyName

  AllowedIPAddressAndCIDRforAdmins:
    Description: Enter the allowed IP address and CIDR block for Administrators
    Type: String
    Default: 10.100.0.0/32

  AllowedIPAddressAndCIDRforUsers:
    Description: Enter the allowed IP address and CIDR block for Users
    Type: String
    Default: 10.200.0.0/32
  S3BucketName:
    Description: S3 bucket that contains files for ParallelCluster
    Type: String

Resources:
  PclusterVpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: 'default'
      Tags:
        - Key: Name
          Value: IsolatedCluster

  IsolatedHPCSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref PclusterVpc
      CidrBlock: '10.0.0.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: IsolatedHPCSubnet

  ParallelClusterAdminNodeSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for ParallelCluster Admin Node EC2'
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: -1
          IpProtocol: "-1"
          ToPort: -1
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedIPAddressAndCIDRforAdmins
      VpcId: !Ref PclusterVpc
      
  HeadNodeSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Head node security group'
      VpcId: !Ref PclusterVpc

  ComputeNodeSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Compute node security group'
      VpcId: !Ref PclusterVpc

  LoginNodeSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Login node security group'
      VpcId: !Ref PclusterVpc 
  
  ComputeToHeadIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref HeadNodeSecurityGroup
      SourceSecurityGroupId: !Ref ComputeNodeSecurityGroup
      Description: 'Allow inbound traffic from compute nodes to head node'
      IpProtocol: '-1'

  ComputeToComputeIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref ComputeNodeSecurityGroup
      SourceSecurityGroupId: !Ref ComputeNodeSecurityGroup
      Description: 'Allow inbound traffic from compute nodes to compute nodes'
      IpProtocol: '-1'

  HeadToComputeIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref ComputeNodeSecurityGroup
      SourceSecurityGroupId: !Ref HeadNodeSecurityGroup
      Description: 'Allow inbound traffic from head node to compute nodes'
      IpProtocol: '-1'

  ComputetoLoginIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref LoginNodeSecurityGroup
      SourceSecurityGroupId: !Ref ComputeNodeSecurityGroup
      Description: 'Allow inbound traffic from login node to compute nodes'
      IpProtocol: '-1' 
  
  LoginToLoginIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref LoginNodeSecurityGroup
      SourceSecurityGroupId: !Ref LoginNodeSecurityGroup
      Description: 'Allow inbound traffic from compute nodes to compute nodes'
      IpProtocol: '-1'

  LoginToComputeIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref ComputeNodeSecurityGroup
      SourceSecurityGroupId: !Ref LoginNodeSecurityGroup
      Description: 'Allow inbound traffic from login nodes to compute nodes'
      IpProtocol: '-1'

  LoginToHeadIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref HeadNodeSecurityGroup
      SourceSecurityGroupId: !Ref LoginNodeSecurityGroup
      Description: 'Allow inbound traffic from login nodes to head node'
      IpProtocol: '-1'

  HeadToLoginIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref LoginNodeSecurityGroup
      SourceSecurityGroupId: !Ref HeadNodeSecurityGroup
      Description: 'Allow inbound traffic from head node to login nodes'
      IpProtocol: '-1'

  LoginEgress:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !Ref LoginNodeSecurityGroup
      CidrIp: 0.0.0.0/0
      Description: 'Allow all outbound traffic from login nodes'
      IpProtocol: '-1'  

  SSHtoLogin:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref LoginNodeSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref AllowedIPAddressAndCIDRforUsers

  HeadToAdminIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref HeadNodeSecurityGroup
      SourceSecurityGroupId: !Ref ParallelClusterAdminNodeSecurityGroup
      Description: 'Allow inbound traffic from admin node to head node'
      IpProtocol: '-1'

  AllowAllEgress:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !Ref ComputeNodeSecurityGroup
      CidrIp: 0.0.0.0/0
      Description: 'Allow all outbound traffic from compute nodes'
      IpProtocol: '-1'  

  VpcEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSM access
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: -1
          IpProtocol: "-1"
          ToPort: -1
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId: !Ref PclusterVpc 

  CloudWatchLogsEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref PclusterVpc
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.logs'
      VpcEndpointType: 'Interface'
      SubnetIds:
        - !Ref IsolatedHPCSubnet
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup
      PrivateDnsEnabled: true
      
  CloudWatchMonitoringEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref PclusterVpc
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.monitoring'
      VpcEndpointType: 'Interface'
      SubnetIds:
        - !Ref IsolatedHPCSubnet
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup
      PrivateDnsEnabled: true

  CloudFormationEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref PclusterVpc
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.cloudformation'
      VpcEndpointType: 'Interface'
      SubnetIds:
        - !Ref IsolatedHPCSubnet
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup
      PrivateDnsEnabled: true
   
  STSEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref PclusterVpc
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.sts'
      VpcEndpointType: 'Interface'
      SubnetIds:
        - !Ref IsolatedHPCSubnet
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup
      PrivateDnsEnabled: true

  EC2Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref PclusterVpc
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2'
      VpcEndpointType: 'Interface'
      SubnetIds:
        - !Ref IsolatedHPCSubnet
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup
      PrivateDnsEnabled: true

  S3Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref PclusterVpc
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: 'Gateway'
      RouteTableIds:
        - !Ref PclusterVpcRouteTable

  DynamoDBEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref PclusterVpc
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'
      VpcEndpointType: 'Gateway'
      RouteTableIds:
        - !Ref PclusterVpcRouteTable

  SystemsManagerEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref PclusterVpc
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssm'
      VpcEndpointType: 'Interface'
      SubnetIds:
        - !Ref IsolatedHPCSubnet
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup
      PrivateDnsEnabled: true
      
  SSMMessagesEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref PclusterVpc
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssmmessages'
      VpcEndpointType: 'Interface'
      SubnetIds:
        - !Ref IsolatedHPCSubnet
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup
      PrivateDnsEnabled: true
     
  AutoscalingEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref PclusterVpc
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.autoscaling'
      VpcEndpointType: 'Interface'
      SubnetIds:
        - !Ref IsolatedHPCSubnet
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup
      PrivateDnsEnabled: true  

  EC2MessagesEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref PclusterVpc
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2messages'
      VpcEndpointType: 'Interface'
      SubnetIds:
        - !Ref IsolatedHPCSubnet
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup
      PrivateDnsEnabled: true

  PclusterVpcRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref PclusterVpc

  SubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref IsolatedHPCSubnet
      RouteTableId: !Ref PclusterVpcRouteTable

  EC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: CustomParallelClusterPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: 'EC2Read'
                Effect: Allow
                Action: 
                    - 'ec2:Describe*'
                Resource: '*'
              - Sid: 'EC2Write'
                Effect: Allow
                Action: 
                    - 'ec2:AllocateAddress'
                    - 'ec2:AssociateAddress'
                    - 'ec2:AttachNetworkInterface'
                    - 'ec2:AuthorizeSecurityGroupEgress'
                    - 'ec2:AuthorizeSecurityGroupIngress'
                    - 'ec2:CreateFleet'
                    - 'ec2:CreateLaunchTemplate'
                    - 'ec2:CreateLaunchTemplateVersion'
                    - 'ec2:CreateNetworkInterface'
                    - 'ec2:CreatePlacementGroup'
                    - 'ec2:CreateSecurityGroup'
                    - 'ec2:CreateSnapshot'
                    - 'ec2:CreateTags'
                    - 'ec2:CreateVolume'
                    - 'ec2:DeleteLaunchTemplate'
                    - 'ec2:DeleteNetworkInterface'
                    - 'ec2:DeletePlacementGroup'
                    - 'ec2:DeleteSecurityGroup'
                    - 'ec2:DeleteVolume'
                    - 'ec2:DisassociateAddress'
                    - 'ec2:ModifyLaunchTemplate'
                    - 'ec2:ModifyNetworkInterfaceAttribute'
                    - 'ec2:ModifyVolume'
                    - 'ec2:ModifyVolumeAttribute'
                    - 'ec2:ReleaseAddress'
                    - 'ec2:RevokeSecurityGroupEgress'
                    - 'ec2:RevokeSecurityGroupIngress'
                    - 'ec2:RunInstances'
                    - 'ec2:TerminateInstances'
                Resource: '*'
              - Sid: 'DynamoDB'
                Effect: Allow
                Action: 
                    - 'dynamodb:DescribeTable'
                    - 'dynamodb:ListTagsOfResource'
                    - 'dynamodb:CreateTable'
                    - 'dynamodb:DeleteTable'
                    - 'dynamodb:GetItem'
                    - 'dynamodb:PutItem'
                    - 'dynamodb:UpdateItem'
                    - 'dynamodb:Query'
                    - 'dynamodb:TagResource'
                Resource: !Sub 'arn:${AWS::Partition}:dynamodb:*:${AWS::AccountId}:table/parallelcluster-*'
              - Sid: 'Route53HostedZones'
                Effect: Allow
                Action: 
                    - 'route53:ChangeResourceRecordSets'
                    - 'route53:ChangeTagsForResource'
                    - 'route53:CreateHostedZone'
                    - 'route53:DeleteHostedZone'
                    - 'route53:GetChange'
                    - 'route53:GetHostedZone'
                    - 'route53:ListResourceRecordSets'
                    - 'route53:ListQueryLoggingConfigs'
                Resource: '*'
              - Sid: 'CloudWatch'
                Effect: Allow
                Action: 
                    - 'cloudwatch:PutDashboard'
                    - 'cloudwatch:ListDashboards'
                    - 'cloudwatch:DeleteDashboards'
                    - 'cloudwatch:GetDashboard'
                    - 'cloudwatch:PutMetricAlarm'
                    - 'cloudwatch:DeleteAlarms'
                    - 'cloudwatch:DescribeAlarms'
                    - 'cloudwatch:PutCompositeAlarm'
                Resource: '*'
              - Sid: 'IamRead'
                Effect: Allow
                Action: 
                    - 'iam:GetRole'
                    - 'iam:GetRolePolicy'
                    - 'iam:GetPolicy'
                    - 'iam:SimulatePrincipalPolicy'
                    - 'iam:GetInstanceProfile'
                Resource:
                    - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*'
                    - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/*'
                    - !Sub 'arn:${AWS::Partition}:iam::aws:policy/*'
                    - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*'
              - Sid: 'CloudFormation'
                Effect: Allow
                Action: 
                    - 'cloudformation:*'
                Resource: '*' 
              - Sid: 'IamInstanceProfile'
                Effect: Allow
                Action: 
                    - 'iam:CreateInstanceProfile'
                    - 'iam:DeleteInstanceProfile'
                    - 'iam:AddRoleToInstanceProfile'
                    - 'iam:RemoveRoleFromInstanceProfile'
                Resource: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/parallelcluster/*'
              - Sid: 'IamPassRole'
                Effect: Allow
                Action: 
                    - 'iam:PassRole'
                Resource: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/parallelcluster/*'
                Condition: 
                  StringEqualsIfExists:
                    "iam:PassedToService":
                      - "lambda.amazonaws.com"
                      - "ec2.amazonaws.com"
                      - "spotfleet.amazonaws.com"
              - Sid: 'Lambda'
                Effect: Allow
                Action: 
                    - 'lambda:CreateFunction'
                    - 'lambda:DeleteFunction'
                    - 'lambda:GetFunctionConfiguration'
                    - 'lambda:GetFunction'
                    - 'lambda:InvokeFunction'
                    - 'lambda:AddPermission'
                    - 'lambda:RemovePermission'
                    - 'lambda:UpdateFunctionConfiguration'
                    - 'lambda:TagResource'
                    - 'lambda:ListTags'
                    - 'lambda:UntagResource'
                Resource: 
                    - !Sub 'arn:${AWS::Partition}:lambda:*:${AWS::AccountId}:function:parallelcluster-*'
                    - !Sub 'arn:${AWS::Partition}:lambda:*:${AWS::AccountId}:function:pcluster-*'
              - Sid: 'S3ResourcesBucket'
                Effect: Allow
                Action: 
                    - 's3:*'
                Resource: 
                    - !Sub 'arn:${AWS::Partition}:s3:::${S3BucketName}/*'
                    - !Sub 'arn:${AWS::Partition}:s3:::parallelcluster-*'
                    - !Sub 'arn:${AWS::Partition}:s3:::aws-parallelcluster-*'
              - Sid: 'S3ParallelClusterReadOnly'
                Effect: Allow
                Action: 
                    - 's3:Get*'
                    - 's3:List*'
                Resource: 
                    - !Sub 'arn:${AWS::Partition}:s3:::*-aws-parallelcluster*'
              - Sid: 'EFS'
                Effect: Allow
                Action: 
                    - 'elasticfilesystem:*'
                Resource: 
                    - !Sub 'arn:${AWS::Partition}:elasticfilesystem:*:${AWS::AccountId}:*'
              - Sid: 'CloudWatchLogs'
                Effect: Allow
                Action: 
                    - 'logs:DeleteLogGroup'
                    - 'logs:PutRetentionPolicy'
                    - 'logs:DescribeLogGroups'
                    - 'logs:CreateLogGroup'
                    - 'logs:TagResource'
                    - 'logs:UntagResource'
                    - 'logs:FilterLogEvents'
                    - 'logs:GetLogEvents'
                    - 'logs:CreateExportTask'
                    - 'logs:DescribeLogStreams'
                    - 'logs:DescribeExportTasks'
                    - 'logs:DescribeMetricFilters'
                    - 'logs:PutMetricFilter'
                    - 'logs:DeleteMetricFilter'
                Resource: 
                    - '*'
              - Sid: 'ResourceGroupRead'
                Effect: Allow
                Action: 
                    - 'resource-groups:ListGroupResources'
                Resource: 
                    - '*'
              - Sid: 'AllowDescribingFileCache'
                Effect: Allow
                Action: 
                    - 'fsx:DescribeFileCaches'
                Resource: 
                    - '*'
              - Sid: 'FSx'
                Effect: Allow
                Action: 
                    - 'fsx:*'
                Resource: 
                    - !Sub 'arn:${AWS::Partition}:fsx:*:${AWS::AccountId}:*'
              - Sid: 'FSxServiceRole'
                Effect: Allow
                Action: 
                    - 'iam:CreateServiceLinkedRole'
                    - 'iam:DeleteServiceLinkedRole'
                Resource: 
                    - '*'
                Condition: 
                  StringEquals:
                    "iam:AWSServiceName":
                      - 'fsx.amazonaws.com'
                      - 's3.data-source.lustre.fsx.amazonaws.com'
              - Sid: 'FSxAttachRole'
                Effect: Allow
                Action: 
                    - 'iam:CreateServiceLinkedRole'
                    - 'iam:AttachRolePolicy'
                    - 'iam:PutRolePolicy'
                Resource: 
                    - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/aws-service-role/s3.data-source.lustre.fsx.amazonaws.com/*'
              - Sid: 'EC2'
                Effect: Allow
                Action: 
                    - 'ec2:DescribeImages'
                    - 'ec2:DescribeInstanceTypeOfferings'
                    - 'ec2:DescribeInstanceTypes'
                    - 'ec2:DeregisterImage'
                    - 'ec2:DeleteSnapshot'
                Resource: 
                    - '*'  
              - Sid: 'IAM'
                Effect: Allow
                Action: 
                    - 'iam:CreateInstanceProfile'
                    - 'iam:AddRoleToInstanceProfile'
                    - 'iam:GetRole'
                    - 'iam:GetRolePolicy'
                    - 'iam:GetInstanceProfile'
                    - 'iam:RemoveRoleFromInstanceProfile'
                Resource: 
                    - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/parallelcluster/*'
                    - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/ParallelClusterImage*'
                    - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/parallelcluster/*'
              - Sid: 'IAMPassRole'
                Effect: Allow
                Action: 
                    - 'iam:PassRole'
                Resource: 
                    - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/parallelcluster/*'
                    - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/parallelcluster/*'
                Condition: 
                  StringEquals:
                    "iam:PassedToService":
                      - 'lambda.amazonaws.com'
                      - 'ec2.amazonaws.com'
              - Sid: 'CloudWatchIB'
                Effect: Allow
                Action: 
                    - 'logs:CreateLogGroup'
                    - 'logs:TagResource'
                    - 'logs:UntagResource'
                    - 'logs:DeleteLogGroup'
                Resource: 
                    - !Sub 'arn:${AWS::Partition}:logs:*:${AWS::AccountId}:log-group:/aws/imagebuilder/ParallelClusterImage-*'
                    - !Sub 'arn:${AWS::Partition}:logs:*:${AWS::AccountId}:log-group:/aws/lambda/ParallelClusterImage-*'
              - Sid: 'CloudFormationIB'
                Effect: Allow
                Action: 
                    - 'cloudformation:DescribeStacks'
                    - 'cloudformation:CreateStack'
                    - 'cloudformation:DeleteStack'
                Resource: 
                    - !Sub 'arn:${AWS::Partition}:cloudformation:*:${AWS::AccountId}:stack/*'
              - Sid: 'LambdaIB'
                Effect: Allow
                Action: 
                    - 'lambda:CreateFunction'
                    - 'lambda:GetFunction'
                    - 'lambda:AddPermission'
                    - 'lambda:RemovePermission'
                    - 'lambda:DeleteFunction'
                    - 'lambda:TagResource'   
                    - 'lambda:ListTags'
                    - 'lambda:UntagResource'                        
                Resource: 
                    - !Sub 'arn:${AWS::Partition}:lambda:*:${AWS::AccountId}:function:ParallelClusterImage-*'
              - Sid: 'ImageBuilderGet'
                Effect: Allow
                Action: 
                    - 'imagebuilder:Get*'
                Resource: 
                    - '*'
              - Sid: 'ImageBuilder'
                Effect: Allow
                Action: 
                    - 'imagebuilder:CreateImage'
                    - 'imagebuilder:TagResource'
                    - 'imagebuilder:CreateImageRecipe'
                    - 'imagebuilder:CreateComponent'
                    - 'imagebuilder:CreateDistributionConfiguration'
                    - 'imagebuilder:CreateInfrastructureConfiguration' 
                    - 'imagebuilder:DeleteImage'
                    - 'imagebuilder:DeleteComponent'
                    - 'imagebuilder:DeleteImageRecipe'    
                    - 'imagebuilder:DeleteInfrastructureConfiguration'
                    - 'imagebuilder:DeleteDistributionConfiguration'                      
                Resource: 
                    - !Sub 'arn:${AWS::Partition}:imagebuilder:*:${AWS::AccountId}:image/parallelclusterimage-*'
                    - !Sub 'arn:${AWS::Partition}:imagebuilder:*:${AWS::AccountId}:image-recipe/parallelclusterimage-*'
                    - !Sub 'arn:${AWS::Partition}:imagebuilder:*:${AWS::AccountId}:component/parallelclusterimage-*'
                    - !Sub 'arn:${AWS::Partition}:imagebuilder:*:${AWS::AccountId}:distribution-configuration/parallelclusterimage-*'
                    - !Sub 'arn:${AWS::Partition}:imagebuilder:*:${AWS::AccountId}:infrastructure-configuration/parallelclusterimage-*'
              - Sid: 'SNS'
                Effect: Allow
                Action: 
                    - 'sns:GetTopicAttributes'
                    - 'sns:TagResource'
                    - 'sns:CreateTopic'
                    - 'sns:Subscribe'
                    - 'sns:Publish'
                    - 'sns:DeleteTopic'
                    - 'sns:Unsubscribe'
                Resource: 
                    - !Sub 'arn:${AWS::Partition}:sns:*:${AWS::AccountId}:ParallelClusterImage-*'
              - Sid: 'S3Objects'
                Effect: Allow
                Action: 
                    - 's3:PutObject'
                    - 's3:GetObject'
                    - 's3:GetObjectVersion'
                    - 's3:DeleteObject'
                    - 's3:DeleteObjectVersion'
                Resource: 
                    - !Sub 'arn:${AWS::Partition}:s3:::parallelcluster-*/*'                 
              - Sid: 'CreateServiceLinkedRole'
                Effect: Allow
                Action: 
                    - 'iam:CreateServiceLinkedRole'
                Resource: 
                    - !Sub 'arn:${AWS::Partition}:iam::*:role/aws-service-role/imagebuilder.amazonaws.com/AWSServiceRoleForImageBuilder'
                Condition: 
                  StringLike:
                    "iam:AWSServiceName":
                      - 'imagebuilder.amazonaws.com'
              - Sid: 'IamRole'
                Effect: Allow
                Action: 
                    - 'iam:CreateServiceLinkedRole'
                    - 'iam:DeleteRole'
                    - 'iam:TagRole'
                Resource: 
                    - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/parallelcluster/*'
              - Sid: 'IamCreateRole'
                Effect: Allow
                Action: 
                    - 'iam:CreateRole'
                Resource: 
                    - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/parallelcluster/*' 
              - Sid: 'IamInlinePolicy'
                Effect: Allow
                Action: 
                    - 'iam:DeleteRolePolicy'
                    - 'iam:PutRolePolicy'
                Resource: 
                    - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/parallelcluster/*'
              - Sid: 'S3GetAccess'
                Effect: Allow
                Action: 
                    - 's3:ListBucket'
                    - 's3:GetObject'
                Resource: 
                    - !Sub 'arn:${AWS::Partition}:s3:::${S3BucketName}'
                    - !Sub 'arn:${AWS::Partition}:s3:::${S3BucketName}/*'
              - Sid: 'IamPolicy'
                Effect: Allow
                Action: 
                    - 'iam:AttachRolePolicy'
                    - 'iam:DetachRolePolicy'
                Resource: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/parallelcluster/*'
                Condition: 
                  ArnLike:
                    "iam:PolicyARN":
                      - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/parallelcluster*'
                      - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/parallelcluster/*'
                      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy'
                      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
                      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AWSBatchFullAccess'
                      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonS3ReadOnlyAccess'
                      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSBatchServiceRole'
                      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role'
                      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
                      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole'
                      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/EC2InstanceProfileForImageBuilder'
                      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/ElasticLoadBalancingFullAccess'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AutoScalingFullAccess'
        
  PclusterProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: "/"
      Roles:
        - !Ref EC2Role


  ParallelClusterAdminNode:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref Keypair
      ImageId: !Ref ParallelClusterEC2InstanceAmiId
      SecurityGroupIds: [!Ref ParallelClusterAdminNodeSecurityGroup]
      SubnetId: !Ref IsolatedHPCSubnet
      IamInstanceProfile: !Ref PclusterProfile
      Tags:
        - Key: Name
          Value: ParallelClusterAdminNode
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Set AWS region
          export AWS_DEFAULT_REGION=${AWS::Region}
          # Install AWS ParallelCluster
          mkdir /usr/bin/pcluster
          # Change the path of the bucket to match yours
          aws s3 cp s3://${S3BucketName} /usr/bin/pcluster --recursive --exclude "*" --include "*.zip" 
          cd /usr/bin/pcluster
          sudo unzip *.zip -d pcluster-installer-bundle
          cd pcluster-installer-bundle
          sudo chmod +x install_pcluster.sh
          sudo bash install_pcluster.sh
          source ~/.bash_profile
          cat > /etc/profile.d/pcluster.sh << EOF
          export PATH=/usr/bin/pcluster/pcluster-installer-bundle:/usr/bin/pcluster/pcluster-installer-bundle/node-v*/bin:/bin:PATH
          export AWS_DEFAULT_REGION=${AWS::Region}
          EOF
          export PATH=/usr/bin/pcluster/pcluster-installer-bundle:$PATH
          export AWS_STS_REGIONAL_ENDPOINTS=regional          
          cd /usr/bin/pcluster
          
          #Launch a Cluster
          cat > IsolatedCluster.yaml << EOF
          Region: ${AWS::Region}
          Image:
            Os: alinux2
          HeadNode:
            InstanceType: t2.micro
            Networking:
              SubnetId: ${IsolatedHPCSubnet}
              SecurityGroups: 
                - ${HeadNodeSecurityGroup}
            Ssh:
              KeyName: ${Keypair}
            Iam:
              AdditionalIamPolicies:
                - Policy: arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
          SharedStorage:
            - MountDir: /ebs
              Name: EBSExtData
              StorageType: Ebs
              EbsSettings:
                VolumeType: io1
                DeletionPolicy: Delete
          LoginNodes:
            Pools:
              - Name: user-pool
                Count: 2
                InstanceType: t2.micro
                Ssh:
                  KeyName: ${Keypair}
                Networking:
                  SubnetIds:
                    - ${IsolatedHPCSubnet}
                  SecurityGroups:
                    - ${LoginNodeSecurityGroup}
                Iam: 
                  AdditionalIamPolicies: 
                    - Policy: arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore  
          Scheduling:
            Scheduler: slurm
            SlurmSettings:
              QueueUpdateStrategy: DRAIN
              Dns:
                DisableManagedDns: true
                UseEc2Hostnames: true
            SlurmQueues:
            - Name: queue1
              ComputeResources:
              - Name: compute
                Instances:
                - InstanceType: t2.micro
                MinCount: 1
                MaxCount: 10
              Networking:
                SubnetIds:
                - ${IsolatedHPCSubnet}
                SecurityGroups: 
                - ${ComputeNodeSecurityGroup}
              Iam:
                AdditionalIamPolicies:
                 - Policy: arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
          EOF
            
          # Initialize ParallelCluster with the above configuration
          pcluster create-cluster --cluster-name "IsolatedCluster" --cluster-configuration "./IsolatedCluster.yaml" --suppress-validators type:AdditionalIamPolicyValidator --rollback-on-failure false 

Outputs:
  VPCId:
    Description: The ID of the ParallelCluster VPC
    Value: !Ref PclusterVpc
  SubnetId:
    Description: The ID of the ParallelCluster Isolated Subnet
    Value: !Ref IsolatedHPCSubnet
  ParallelClusterAdminNode:
    Description: The ID of the ParallelCluster Admin Node
    Value: !Ref ParallelClusterAdminNode