AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Demonstrates how to enable Research and Engineering Studio (RES) to integrate with a ParallelCluster LoginNode.

Resources:
  LoginNodeAMICommandSSMDocument:
    Type: AWS::SSM::Document
    Properties:
      Name: EnableLoginNodeforRes
      DocumentType: Automation
      Content:
        schemaVersion: '0.3'
        description: |
          Enable Research and Engineering Studio (RES) to integrate with a ParallelCluster LoginNode.
        assumeRole: !GetAtt SSMExecutionRole.Arn
        parameters:
          resStackName:
            type: String
          pcClusterName:
            type: String
        mainSteps:
          - description: Get the LoginNode instance id
            name: getInstanceId
            action: aws:executeAwsApi
            nextStep: UpdateHeadNodeSG
            isEnd: false
            inputs:
              Filters:
                - Values:
                    - LoginNode
                  Name: tag:Name
                - Values:
                    - '{{pcClusterName}}'
                  Name: tag:parallelcluster:cluster-name
                - Values:
                    - running
                  Name: instance-state-name
              Service: ec2
              Api: DescribeInstances
            outputs:
              - Type: StringList
                Name: InstanceId
                Selector: $.Reservations[0].Instances[0].InstanceId
          - description: Adds ingress rules to HeadNode SG
            name: UpdateHeadNodeSG
            action: aws:executeScript
            nextStep: allowDcv
            isEnd: false
            inputs:
              Runtime: python3.8
              Handler: script_handler
              Script: |
                def script_handler(events, context):
                    import boto3

                    pcClusterName = events["pcClusterName"]
                    resStackName = events["resStackName"]

                    HEADNODE_SG_NAME = "HeadNodeSecurityGroup"

                    # Get the cloudformation resources from the pcClusterName stack
                    cfn_client = boto3.client("cloudformation")
                    stack_resources = cfn_client.describe_stack_resources(StackName=pcClusterName)[
                        "StackResources"
                    ]

                    headnode_sg = next(
                        (
                            resource
                            for resource in stack_resources
                            if resource["LogicalResourceId"].startswith("HeadNodeSecurityGroup")
                            and resource["ResourceType"] == "AWS::EC2::SecurityGroup"
                        ),
                        None,
                    )["PhysicalResourceId"]

                    print(f"[-] Updating security group: '{headnode_sg}'")

                    # Get security group from res stack
                    stack_resources = cfn_client.describe_stack_resources(
                        StackName=f"{resStackName}-vdc"
                    )["StackResources"]

                    vdcdcv_sg = next(
                        (
                            resource
                            for resource in stack_resources
                            if resource["LogicalResourceId"].startswith("vdcdcvhost")
                            and resource["ResourceType"] == "AWS::EC2::SecurityGroup"
                        ),
                        None,
                    )["PhysicalResourceId"]

                    # print(f"[-] Adding security group: '{security_groups['PhysicalResourceId']}'")

                    ec2_client = boto3.client("ec2")

                    try:
                        ec2_client.authorize_security_group_ingress(
                            GroupId=headnode_sg,
                            IpPermissions=[
                                {
                                    "FromPort": 2049,
                                    "ToPort": 2049,
                                    "IpProtocol": "tcp",
                                    "UserIdGroupPairs": [{"GroupId": vdcdcv_sg}],
                                },
                                {
                                    "FromPort": 6819,
                                    "ToPort": 6829,
                                    "IpProtocol": "tcp",
                                    "UserIdGroupPairs": [{"GroupId": vdcdcv_sg}],
                                },
                            ],
                        )
                    except Exception as e:
                        print(f"[-] Error: {e}")
              InputPayload:
                pcClusterName: '{{ pcClusterName }}'
                resStackName: '{{ resStackName }}'
          - name: allowDcv
            action: aws:runCommand
            nextStep: createAMI
            isEnd: false
            onFailure: Abort
            inputs:
              Parameters:
                commands:
                  - sudo /opt/parallelcluster/scripts/imds/imds-access.sh --allow dcv
              InstanceIds:
                - '{{getInstanceId.InstanceId}}'
              DocumentName: AWS-RunShellScript
          - name: createAMI
            action: aws:createImage
            nextStep: unsetDcv
            isEnd: false
            inputs:
              ImageName: LoginNode_{{getInstanceId.InstanceId}}_{{global:DATE_TIME}}
              InstanceId: '{{getInstanceId.InstanceId}}'
            outputs:
              - Type: String
                Name: AMIImageId
                Selector: $.ImageId
          - name: unsetDcv
            action: aws:runCommand
            isEnd: true
            inputs:
              Parameters:
                commands:
                  - sudo /opt/parallelcluster/scripts/imds/imds-access.sh --unset dcv
              InstanceIds:
                - '{{getInstanceId.InstanceId}}'
              DocumentName: AWS-RunShellScript
        outputs:
          - createAMI.AMIImageId


  SSMExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "ssm.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: EC2LambdaAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:DescribeInstances"
                Resource: "*"
        - PolicyName: CreateLoginNodeImage
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action: 
                - ec2:CreateImage
                - ec2:AuthorizeSecurityGroupIngress
              Resource: "*"
              Condition:
                ForAllValues:StringEquals:
                  aws:TagKeys: 
                    - parallelcluster:cluster-name
        - PolicyName: DescribeStackResources
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action: cloudformation:DescribeStackResources
              Resource: "*"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole"

  ConfigureDcvHostLoginNodeDocument:
    Type: AWS::SSM::Document
    Properties:
      Name: ConfigureDcvHostLoginNode
      DocumentType: Command
      Content:
        schemaVersion: '2.2'
        description: |
          Configure the dcv host to connect to ParallelCluster as a LoginNode.
        mainSteps:
          - name: ConfigureDcvHostLoginNode
            action: aws:runShellScript
            inputs:
              runCommand: 
                - sed -i '/\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}:\/home/ s/^/#/' /etc/fstab
                - iptables -F PARALLELCLUSTER_IMDS && iptables -F OUTPUT
                - shutdown -r 00
