AWSTemplateFormatVersion: 2010-09-09
Description: Creates an IAM instance profile and launch template for PCS compute node groups to integrate with an LDAP server.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Compute node group options
        Parameters:
          - KeyName
          - NodeGroupSecurityGroupIds
      - Label: 
          default: LDAP Configuration
        Parameters:
          - DomainName
          - LdapUri
          - LdapSearchBase
          - DomainServiceAccount
          - PasswordSecretArn
          - SssdConfigTemplateS3Path

Parameters:
  NodeGroupSecurityGroupIds:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Security group(s) for compute node group instances.
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: SSH keypair to log into compute node group instances
    Default: ""
  DomainName:
    Type: String
    Description: LDAP FQDN (e.g. corp.example.com)
    AllowedPattern: ^([a-zA-Z0-9]+[\\.-])+([a-zA-Z0-9])+$
  LdapSearchBase:
    Type: String
    Description: LDAP search base (e.g. dc=corp,dc=example,dc=com)
  LdapUri:
    Description: LDAP connection URI (e.g. ldap://corp.example.com)
    Type: String
  DomainServiceAccount:
    Type: String
    Description: Bind account as DN (e.g cn=ReadOnly,ou=CORP,ou=Users,dc=corp,dc=example,dc=com)
  PasswordSecretArn:
    Type: String
    Description: Secrets Manager ARN where bind password is stored.
  SssdConfigTemplateS3Path:
    Description: SSSD configuration template. Select the one that matches the directory service type you are configuring.
    Type: String
    AllowedValues:
      - aws-hpc-recipes-dev/pcs/recipes/pcs/multiuser_demo/assets/ad.sssd.conf.template
      - aws-hpc-recipes-dev/pcs/recipes/pcs/multiuser_demo/assets/openldap.sssd.conf.template

Resources:
  PcsInstanceIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "AWSPCS-LDAP-${AWS::StackName}"
      Description: "AWS IAM role for PCS node group instances with LDAP support"
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
           - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
           - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
           - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - pcs:RegisterComputeNodeGroupInstance
                Effect: Allow
                Resource: "*"
          PolicyName: PcsRegisterCngInstance
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - s3:getObject
                Effect: Allow
                Resource: !Sub 
                  - "arn:${AWS::Partition}:s3:::${S3Path}"
                  - S3Path: !Ref SssdConfigTemplateS3Path
          PolicyName: GetSsdConfigTemplate
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - secretsmanager:GetResourcePolicy
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecretVersionIds
                Effect: Allow
                Resource: !Ref PasswordSecretArn
          PolicyName: GetSsdConfigSecrets

  PcsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
            - !Ref PcsInstanceIamRole
      InstanceProfileName: !Sub "AWSPCS-LDAP-${AWS::StackName}"

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "AWSPCS-LDAP-${AWS::StackName}"
      LaunchTemplateData:
        # Enforce IMDS v2
        MetadataOptions:
          HttpEndpoint: enabled
          HttpPutResponseHopLimit: 4
          HttpTokens: required
        # Configure SSH keypair
        KeyName: !Ref KeyName
        # Configure node group instance security groups
        SecurityGroupIds: !Ref NodeGroupSecurityGroupIds
        UserData:
          Fn::Base64: !Sub 
            - |
              MIME-Version: 1.0
              Content-Type: multipart/mixed; boundary="==MYBOUNDARY=="

              --==MYBOUNDARY==
              Content-Type: text/x-shellscript; charset="us-ascii"
              #!/bin/bash -xe

              # Function to handle errors
              handle_error() {
                  echo "An error occurred: $1" >&2
                  exit 1
              }

              # Function to execute main code
              main() {
                  # Install software dependencies. Can also be done in the AMI
                  yum install -y sssd sssd-tools sssd-ldap authconfig
                  # Fetch LDAP connection password
                  export BIND_PASSWORD=$(aws secretsmanager get-secret-value --region ${AWS::Region} --secret-id ${BindSecretArn} --query SecretString --output text)
                  # Other config options
                  export BIND_DN="${ServiceAccountDn}"
                  export DOMAIN_NAME="${DomainName}"
                  export LDAP_SEARCH_BASE="${LdapSearchBase}"
                  export LDAP_URI="${LdapUri}"
                  # Write sssd.conf file injecting BIND_DN and BIND_PASSWORD variables
                  aws s3 cp --region ${AWS::Region} s3://${ConfigTemplateS3Path} - | envsubst > /etc/sssd/sssd.conf
                  # Set ownership and permissions. Only root can see this file. 
                  chown root:root /etc/sssd/sssd.conf
                  chmod 0600 /etc/sssd/sssd.conf
                  # Configure system authentication resources for sssd
                  authconfig --enablemkhomedir --enablesssdauth --enablesssd --updateall
                  # Enable SSH password authentication
                  sed -ri 's/\s*PasswordAuthentication\s+no$/PasswordAuthentication yes/g' /etc/ssh/sshd_config
                  # Restart services
                  /usr/bin/systemctl restart sshd && /usr/bin/systemctl restart sssd
              }

              trap 'handle_error "$BASH_COMMAND" $?' ERR

              main

              echo "Script executed successfully"

              --==MYBOUNDARY==--

            - { BindSecretArn: !Ref PasswordSecretArn,
                DomainName: !Ref DomainName,
                ConfigTemplateS3Path: !Ref SssdConfigTemplateS3Path,
                LdapSearchBase: !Ref LdapSearchBase,
                LdapUri: !Ref LdapUri,
                ServiceAccountDn: !Ref DomainServiceAccount }

Outputs:
  InstanceProfile:
    Description: "IAM instance profile name"
    Value: !Ref PcsInstanceProfile
  InstanceProfileArn:
    Description: "IAM instance profile ARN"
    Value: !GetAtt PcsInstanceProfile.Arn
  LaunchTemplateName:
    Description: "Launch template name"
    Value: !Sub "AWSPCS-LDAP-${AWS::StackName}"
  LaunchTemplateId:
    Description: "Launch template Id"
    Value: !Ref LaunchTemplate
  DefaultVersionNumber:
    Description: "Default LT version number"
    Value: !GetAtt LaunchTemplate.DefaultVersionNumber
  LatestVersionNumber:
    Description: "Latest LT version number"
    Value: !GetAtt LaunchTemplate.DefaultVersionNumber
