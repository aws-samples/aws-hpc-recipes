AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Parallel Computing Service "getting started" cluster

### Stack metadata
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: PCS cluster configuration
        Parameters:
          - KeyName
          - AmiId
          - ClientIpCidr
      - Label:
          default: HPC Recipes configuration
        Parameters:
          - HpcRecipesS3Bucket
          - HpcRecipesBranch

Parameters:

  KeyName:
    Description: KeyPair to login to the head node
    Type: AWS::EC2::KeyPair::KeyName
    AllowedPattern: ".+"  # Required

  AmiId:
    Description: (Optional) ID of the AMI that the compute / login node groups run. Defaults to AWS PCS sample ami.
    Type: String
    Default: ''
    AllowedValues:
         - ''

  ClientIpCidr:
    Description: IP(s) allowed to directly access the login nodes. We recommend that you restrict it with your own IP/subnet (x.x.x.x/32 for your own ip or x.x.x.x/24 for range. Replace x.x.x.x with your own PUBLIC IP. You can get your public IP using tools such as https://ifconfig.co/)
    Default: 127.0.0.1/32
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Value must be a valid IP or network range of the form x.x.x.x/x. 

  HpcRecipesS3Bucket:
    Type: String
    Default: aws-hpc-recipes
    Description: HPC Recipes for AWS S3 bucket
    AllowedValues:
         - aws-hpc-recipes
         - aws-hpc-recipes-dev
  HpcRecipesBranch:
    Type: String
    Default: main
    Description: HPC Recipes for AWS release branch
    AllowedPattern: '^(?!.*/\.git$)(?!.*/\.)(?!.*\\.\.)[a-zA-Z0-9-_\.]+$'

Resources:

  PCSCfnProvider:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://${HpcRecipesS3Bucket}.s3.amazonaws.com/${HpcRecipesBranch}/recipes/pcs/getting_started/assets/pcs-cfn.yaml'

  Networking:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        ProvisionSubnetsC: "False"
      TemplateURL: !Sub 'https://${HpcRecipesS3Bucket}.s3.amazonaws.com/${HpcRecipesBranch}/recipes/net/hpc_large_scale/assets/main.yaml'

  EfsStorage:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        SubnetIds: !GetAtt [ Networking, Outputs.DefaultPrivateSubnet ]
        SubnetCount: 1
        VpcId: !GetAtt [ Networking, Outputs.VPC ]
      TemplateURL: !Sub 'https://${HpcRecipesS3Bucket}.s3.amazonaws.com/${HpcRecipesBranch}/recipes/storage/efs_simple/assets/main.yaml'

  FSxLStorage:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        PerUnitStorageThroughput: 125
        SubnetId: !GetAtt [ Networking, Outputs.DefaultPrivateSubnet ]
        VpcId: !GetAtt [ Networking, Outputs.VPC ]
      TemplateURL: !Sub 'https://${HpcRecipesS3Bucket}.s3.amazonaws.com/${HpcRecipesBranch}/recipes/storage/fsx_lustre/assets/persistent.yaml'

  PCSSecurityGroup:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        ClientIpCidr: !Ref ClientIpCidr
        VpcId: !GetAtt [ Networking, Outputs.VPC ]
      TemplateURL: !Sub 'https://${HpcRecipesS3Bucket}.s3.amazonaws.com/${HpcRecipesBranch}/recipes/pcs/getting_started/assets/pcs-cluster-sg.yaml'

  # Cluster

  PCSCluster:
    Type: Custom::Resource
    Properties:
      ServiceToken: !GetAtt [ PCSCfnProvider, Outputs.ServiceToken ]
      clusterName: !Sub '${AWS::StackName}'
      size: SMALL
      scheduler:
        type: SLURM
        version: 23.11
      networking:
        subnetIds:
          - !GetAtt [ Networking, Outputs.DefaultPrivateSubnet ]
        securityGroupIds:
          - !GetAtt [ PCSSecurityGroup, Outputs.ClusterSecurityGroupId ]

  # Compute Node groups
  PCSInstanceProfile:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        # We have to regionalize this in case CX use the template in more than one region. Otherwise,
        # the create action will fail since instance-role-${AWS::StackName} already exists!
        RoleName: !Sub '${AWS::StackName}-${AWS::Region}'
      TemplateURL: !Sub 'https://${HpcRecipesS3Bucket}.s3.amazonaws.com/${HpcRecipesBranch}/recipes/pcs/getting_started/assets/pcs-iip-minimal.yaml'

  PCSLaunchTemplate:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        VpcDefaultSecurityGroupId: !GetAtt [ Networking, Outputs.SecurityGroup ]
        ClusterSecurityGroupId: !GetAtt [ PCSSecurityGroup, Outputs.ClusterSecurityGroupId ]
        SshSecurityGroupId: !GetAtt [ PCSSecurityGroup, Outputs.InboundSshSecurityGroupId ]
        EfsFilesystemSecurityGroupId: !GetAtt [ EfsStorage, Outputs.SecurityGroupId ]
        FSxLustreFilesystemSecurityGroupId: !GetAtt [ FSxLStorage, Outputs.FSxLustreSecurityGroupId ]
        SshKeyName: !Ref KeyName
        EfsFilesystemId: !GetAtt [ EfsStorage, Outputs.EFSFilesystemId ]
        FSxLustreFilesystemId: !GetAtt [ FSxLStorage, Outputs.FSxLustreFilesystemId ]
        FSxLustreFilesystemMountName: !GetAtt [ FSxLStorage, Outputs.FSxLustreMountName ]
      TemplateURL: !Sub 'https://${HpcRecipesS3Bucket}.s3.amazonaws.com/${HpcRecipesBranch}/recipes/pcs/getting_started/assets/cfn-pcs-lt-efs-fsxl.yaml'

  # Compute Node groups - Login Nodes
  PCSNodeGroupLogin:
    Type: Custom::Resource
    Properties:
      ServiceToken: !GetAtt [ PCSCfnProvider, Outputs.ServiceToken ]
      clusterIdentifier: !GetAtt [ PCSCluster, id ]
      computeNodeGroupName: login
      scalingConfiguration:
        minInstanceCount: 1
        maxInstanceCount: 1
      iamInstanceProfileArn: !GetAtt [ PCSInstanceProfile, Outputs.InstanceProfileArn ]
      customLaunchTemplate:
        id: !GetAtt [ PCSLaunchTemplate, Outputs.LoginLaunchTemplateId ]
        version: 1
      subnetIds:
        - !GetAtt [ Networking, Outputs.DefaultPublicSubnet ]
      amiId: !Ref AmiId
      instanceConfigs:
        - instanceType: c6i.xlarge

  # Compute Node groups - Compute Nodes
  PCSNodeGroupCompute:
    Type: Custom::Resource
    Properties:
      ServiceToken: !GetAtt [ PCSCfnProvider, Outputs.ServiceToken ]
      clusterIdentifier: !GetAtt [ PCSCluster, id ]
      computeNodeGroupName: compute-1
      scalingConfiguration:
        minInstanceCount: 0
        maxInstanceCount: 4
      iamInstanceProfileArn: !GetAtt [ PCSInstanceProfile, Outputs.InstanceProfileArn ]
      customLaunchTemplate:
        id: !GetAtt [ PCSLaunchTemplate, Outputs.ComputeLaunchTemplateId ]
        version: 1
      subnetIds:
        - !GetAtt [ Networking, Outputs.DefaultPrivateSubnet ]
      amiId: !Ref AmiId
      instanceConfigs:
        - instanceType: c6i.xlarge

  PCSQueueCompute:
    Type: Custom::Resource
    Properties:
      ServiceToken: !GetAtt [ PCSCfnProvider, Outputs.ServiceToken ]
      clusterIdentifier: !GetAtt [ PCSCluster, id ]
      queueName: demo
      computeNodeGroupConfigurations:
        - computeNodeGroupId: !GetAtt [ PCSNodeGroupCompute, id ]

Outputs:
  ClusterId:
    Description: The ID of the PCS cluster
    Value: !GetAtt [ PCSCluster, id ]
  PcsConsoleUrl:
    Description: URL to access the cluster in the PCS console
    Value: !Sub
      - https://${ConsoleDomain}/pcs/home?region=${AWS::Region}#/clusters/${ClusterId}
      - { ConsoleDomain: !Sub '${AWS::Region}.console.aws.amazon.com',
          ClusterId: !GetAtt [ PCSCluster, id ] 
        }
    Export:
      Name: !Sub ${AWS::StackName}-PcsConsoleUrl
  Ec2ConsoleUrl:
    Description: URL to access instance(s) in the login node group
    Value: !Sub
      - https://${ConsoleDomain}/ec2/home?region=${AWS::Region}#Instances:instanceState=running;tag:aws:pcs:compute-node-group-id=${NodeGroupLoginId}
      - { ConsoleDomain: !Sub '${AWS::Region}.console.aws.amazon.com',
          NodeGroupLoginId: !GetAtt [ PCSNodeGroupLogin, id ] 
        }
    Export:
      Name: !Sub ${AWS::StackName}-Ec2ConsoleUrl
