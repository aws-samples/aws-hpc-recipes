{
 "Parameters": {
  "WindowsManagementHostInstanceId": {
   "Type": "String",
   "Description": "The instance ID of Windows management host."
  },
  "ManagedAdAdminUsername": {
   "Type": "String",
   "Description": "Username of the AWS managed AD admin. For example,\"<managed-directory-NetBIOS-name>\\Admin\""
  },
  "ManagedAdAdminPassword": {
   "Type": "String",
   "Description": "Password of the AWS managed AD admin.",
   "NoEcho": true
  },
  "ManagedAdUsersOU": {
   "Type": "String",
   "Description": "OU of the AWS managed AD users."
  },
  "SenderEmail": {
   "Type": "String",
   "Description": "Email address for sending temporary password to AD users."
  },
  "ManagedAdUserGroup": {
   "Type": "String",
   "Default": "res",
   "Description": "AWS managed AD group that includes all the synced users."
  },
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Resources": {
  "ADManagementLambdaRole8266D20F": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AWSSSODirectoryReadOnly"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "EntraIdStack/ADManagementLambdaRole/Resource"
   }
  },
  "ADManagementLambdaRoleDefaultPolicy5B29B7C7": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "ssm:SendCommand",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":ec2:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":instance/*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":ssm:",
           {
            "Ref": "AWS::Region"
           },
           ":*:document/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "identitystore:GetGroupId",
        "identitystore:IsMemberInGroups",
        "ssm:GetCommandInvocation"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": "ses:SendEmail",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":ses:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":identity/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ADManagementLambdaRoleDefaultPolicy5B29B7C7",
    "Roles": [
     {
      "Ref": "ADManagementLambdaRole8266D20F"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "EntraIdStack/ADManagementLambdaRole/DefaultPolicy/Resource"
   }
  },
  "ADManagementLambda514CFA37": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "import boto3\nimport botocore\nimport json\nimport re\nimport os\nimport string\nfrom random import shuffle\n\ntry:\n    from secrets import choice\nexcept ImportError:\n    from random import choice\n\nWINDOWS_MANAGEMENT_HOST = os.environ.get(\"WINDOWS_MANAGEMENT_HOST\", \"\")\nADMIN_USERNAME = os.environ.get(\"ADMIN_USERNAME\", \"\")\nADMIN_PASSWORD = os.environ.get(\"ADMIN_PASSWORD\", \"\")\nUSERS_OU = os.environ.get(\"USERS_OU\", \"\")\nUSER_GROUPS_TO_SYNC = os.environ.get(\"USER_GROUPS_TO_SYNC\").split(\",\") if os.environ.get(\"USER_GROUPS_TO_SYNC\") else []\nSENDER_EMAIL = os.environ.get(\"SENDER_EMAIL\", \"\")\nMANAGED_AD_USER_GROUP = os.environ.get(\"MANAGED_AD_USER_GROUP\", \"res\")\n\nPASSWORD_LOWER_CASE_CHARS_COUNT = 2\nPASSWORD_UPPER_CASE_CHARS_COUNT = 2\nPASSWORD_NUMBERS_COUNT = 2\nPASSWORD_SPECIAL_CHARS_COUNT = 2\nPASSWORD_LOWER_CASE_CHARS = string.ascii_lowercase\nPASSWORD_UPPER_CASE_CHARS = string.ascii_uppercase\nPASSWORD_NUMBERS = string.digits\nPASSWORD_SPECIAL_CHARS = [\"!\", \"#\", \"%\", \"^\", \"&\", \"*\", \"(\", \")\", \",\", \".\", \"-\", \"_\", \"+\", \"=\", \"<\", \">\", \"?\"]\n\n\ndef send_command(commands):\n    # Send command to the Windows management host to manager AD user\n    ssm_commands = [\n        f\"$username='{ADMIN_USERNAME}'\",\n        f\"$password='{ADMIN_PASSWORD}'\",\n        '$securePassword=ConvertTo-SecureString \"$password\" -AsPlainText -Force',\n        \"$credential=New-Object System.Management.Automation.PSCredential $username, $securePassword\",\n    ]\n    ssm_commands.extend(commands)\n\n    ssm_client = boto3.client(\"ssm\")\n    cmd_result = ssm_client.send_command(\n        InstanceIds=[WINDOWS_MANAGEMENT_HOST],\n        DocumentName=\"AWS-RunPowerShellScript\",\n        Parameters={\"commands\": ssm_commands},\n    )\n    command_id = cmd_result.get(\"Command\", {}).get(\"CommandId\", \"\")\n\n    # Wait for the commands to complete\n    waiter = ssm_client.get_waiter(\"command_executed\")\n    waiter.wait(\n        CommandId=command_id,\n        InstanceId=WINDOWS_MANAGEMENT_HOST,\n    )\n\n    # Get the command output\n    return ssm_client.get_command_invocation(\n        CommandId=command_id,\n        InstanceId=WINDOWS_MANAGEMENT_HOST,\n    )\n\n\ndef create_ad_group():\n    result = send_command(\n        [\n            f'New-ADGroup -Name \"{MANAGED_AD_USER_GROUP}\" -SamAccountName \"{MANAGED_AD_USER_GROUP}\" -GroupScope Global '\n            f'-Description \"Entra ID user group\" -Path \"{USERS_OU}\" -Credential $credential'\n        ]\n    )\n\n    error = result.get(\"StandardErrorContent\", \"\")\n    if error:\n        if \"The specified group already exists\" not in error:\n            print(f\"failed to create AD group {MANAGED_AD_USER_GROUP} to AD: {error}\")\n    else:\n        print(f\"created AD group {MANAGED_AD_USER_GROUP}\")\n\n\ndef ad_group_exists():\n    result = send_command([f'Get-ADGroup -Identity \"{MANAGED_AD_USER_GROUP}\" -Credential $credential'])\n\n    error = result.get(\"StandardErrorContent\", \"\")\n    if error:\n        if \"Cannot find an object with identity\" not in error:\n            print(f\"failed to get AD group {MANAGED_AD_USER_GROUP}: {error}\")\n        return False\n    else:\n        return True\n\n\ndef add_user_to_group(username):\n    if not ad_group_exists():\n        create_ad_group()\n\n    result = send_command(\n        [\n            f'Add-ADGroupMember -Identity \"{MANAGED_AD_USER_GROUP}\" -Members {username} -Credential $credential'\n        ]\n    )\n\n    error = result.get(\"StandardErrorContent\", \"\")\n    if error:\n        print(f\"failed to add user {username} to group {MANAGED_AD_USER_GROUP}: {error}\")\n    else:\n        print(f\"added user {username} to group {MANAGED_AD_USER_GROUP}\")\n\n\ndef send_invitation_email(username, email, password):\n    user_invitation_email_subject = 'Invitation to Join RES'\n    email_message = [\n        f'<p>Hello <b>{username},</b></p>',\n        '<p>You have been invited to join the RES environment.</p>',\n        '<p>Your temporary password is:</p>',\n        f'<h3>{password}</h3>',\n        '<p>---<br/>',\n        '<b>RES Environment Admin</b></p>'\n    ]\n    user_invitation_email_body = os.linesep.join(email_message)\n    ses_client = boto3.client(\"ses\")\n    ses_client.send_email(\n        Source=SENDER_EMAIL,\n        Destination={\n            \"ToAddresses\": [\n                email,\n            ],\n        },\n        Message={\n            'Subject': {\n                'Data': user_invitation_email_subject,\n            },\n            'Body': {\n                'Html': {\n                    'Data': user_invitation_email_body,\n                },\n            },\n        },\n    )\n\n\ndef generate_password():\n    final_password = [choice(list(PASSWORD_LOWER_CASE_CHARS)) for i in range(PASSWORD_LOWER_CASE_CHARS_COUNT)]\n    final_password += [choice(list(PASSWORD_UPPER_CASE_CHARS)) for i in range(PASSWORD_UPPER_CASE_CHARS_COUNT)]\n    final_password += [choice(list(PASSWORD_NUMBERS)) for i in range(PASSWORD_NUMBERS_COUNT)]\n    final_password += [choice(list(PASSWORD_SPECIAL_CHARS)) for i in range(PASSWORD_SPECIAL_CHARS_COUNT)]\n\n    shuffle(final_password)\n    return \"\".join(final_password)\n\n\ndef add_user_to_ad(username, email, user_id):\n    password = generate_password()\n    result = send_command(\n        [\n            f'$adUserPassword=ConvertTo-SecureString \"{password}\" -AsPlainText -Force',\n            f'New-ADUser -Name \"{username}\" -SamAccountName \"{username}\" -AccountPassword $adUserPassword '\n            f'-ChangePasswordAtLogon $true -Description \"{user_id}\" -Enabled $true -PasswordNotRequired $true '\n            f'-EmailAddress \"{email}\" -Path \"{USERS_OU}\" -Credential $credential'\n        ]\n    )\n\n    error = result.get(\"StandardErrorContent\", \"\")\n    if error:\n        print(f\"failed to add user {username} to AD: {error}\")\n    else:\n        print(f\"added user {username} to AD\")\n\n        add_user_to_group(username)\n        send_invitation_email(username, email, password)\n\n\ndef delete_user_from_ad(username):\n    result = send_command(\n        [\n            f'Remove-ADUser -Identity \"{username}\" -Confirm:$False -Credential $credential'\n        ]\n    )\n\n    error = result.get(\"StandardErrorContent\", \"\")\n    if error:\n        print(f\"failed to remove user {username} from AD: {error}\")\n    else:\n        print(f\"removed user {username} from AD\")\n\n\ndef delete_user_from_ad_by_user_id(user_id):\n    username = get_existing_username_by_id(user_id)\n    delete_user_from_ad(username)\n\n\ndef get_existing_username_by_id(user_id):\n    get_username_result = send_command(\n        [\n            f\"$user=Get-ADUser -Filter \\\"Description -eq '{user_id}'\\\" -Credential $credential\",\n            \"$user.name\",\n        ]\n    )\n    error = get_username_result.get(\"StandardErrorContent\", \"\")\n    if error:\n        print(f\"failed to get user with id {user_id} from AD: {error}\")\n        return \"\"\n\n    existing_username = re.sub(\n        r\"[\\r\\n]*\", \"\", get_username_result.get(\"StandardOutputContent\", \"\")\n    )\n    return existing_username\n\n\ndef is_user_in_groups_to_sync(identity_store_id, user_id):\n    if not USER_GROUPS_TO_SYNC:\n        return True\n\n    group_ids = []\n    identity_store_client = boto3.client(\"identitystore\")\n    for group_name in USER_GROUPS_TO_SYNC:\n        try:\n            response = identity_store_client.get_group_id(\n                IdentityStoreId=identity_store_id,\n                AlternateIdentifier={\n                    'UniqueAttribute': {\n                        'AttributePath': 'DisplayName',\n                        'AttributeValue': group_name\n                    }\n                }\n            )\n            group_ids.append(response[\"GroupId\"])\n        except botocore.exceptions.ClientError as e:\n            if e.response['Error']['Code'] == \"ResourceNotFoundException\":\n                print(f\"group {group_name} doesn't exist.\")\n                continue\n            else:\n                raise e\n\n    if group_ids:\n        response = identity_store_client.is_member_in_groups(\n            IdentityStoreId=identity_store_id,\n            MemberId={\n                'UserId': user_id\n            },\n            GroupIds=group_ids,\n        )\n        for result in response.get(\"Results\", []):\n            if result.get(\"MembershipExists\", False):\n                return True\n\n    return False\n\n\ndef update_email(username, email):\n    # Check whether the user email is changed\n    get_user_email_result = send_command(\n        [\n            f'$user=Get-ADUser -Identity \"{username}\" -Properties mail -Credential $credential',\n            \"$user.mail\",\n        ]\n    )\n    error = get_user_email_result.get(\"StandardErrorContent\", \"\")\n    if error:\n        print(f\"failed to get email of user {username} from AD: {error}\")\n        return\n\n    current_email = re.sub(\n        r\"[\\r\\n]*\", \"\", get_user_email_result.get(\"StandardOutputContent\", \"\")\n    )\n\n    # Update the AD user if the email is changed\n    if current_email == email:\n        print(f\"skip updating email of user {username} since it is unchanged\")\n    else:\n        update_user_email_result = send_command(\n            [\n                f'Set-ADUser -Identity \"{username}\" -EmailAddress {email} -Credential $credential'\n            ]\n        )\n        error = update_user_email_result.get(\"StandardErrorContent\", \"\")\n        if error:\n            print(f\"failed to update email of user {username} in AD: {error}\")\n        else:\n            print(f\"updated email of user {username} in AD\")\n\n\ndef reset_password(username, password):\n    update_password_result = send_command(\n        [\n            f\"$adUserPassword=ConvertTo-SecureString {password} -AsPlainText -Force\",\n            f'Set-ADAccountPassword -Identity \"{username}\" -Reset -NewPassword $adUserPassword -Credential $credential'\n        ]\n    )\n    error = update_password_result.get(\"StandardErrorContent\", \"\")\n    if error:\n        print(f\"failed to reset password fo user {username} in AD: {error}\")\n    else:\n        print(f\"reset password for user {username} in AD\")\n\n\ndef get_user_id(event):\n    event_name = event.get(\"detail\", {}).get(\"eventName\", \"\")\n    if event_name == \"DeleteUser\":\n        user_id = event.get(\"detail\", {}).get(\"requestParameters\", {}).get(\"userId\", \"\")\n    elif event_name == \"CreateGroupMembership\":\n        user_id = event.get(\"detail\", {}).get(\"requestParameters\", {}).get(\"MemberId\", \"\")\n    elif event_name == \"UpdateUserName\":\n        user_id = event.get(\"detail\", {}).get(\"requestParameters\", {}).get(\"userId\", \"\")\n    else:\n        user_id = event.get(\"detail\", {}).get(\"responseElements\", {}).get(\"user\", {}).get(\"userId\", \"\")\n\n    return user_id\n\n\ndef handler(event, context):\n    if event.get(\"detail\", {}).get(\"errorCode\"):\n        # Ignore failed requests\n        return {\"statusCode\": 200, \"body\": json.dumps(event)}\n\n    event_name = event.get(\"detail\", {}).get(\"eventName\", \"\")\n    # Add, update, delete or reset user password in the managed AD base on the event type\n    if event_name == \"ResetPassword\":\n        # Temporary workaround for resetting user password.\n        # Payload should have the format {\"detail\": {\"eventName\": \"ResetPassword\", \"username\": \"<username>\", \"password\": \"<password>\" }}\n        username = event.get(\"detail\", {}).get(\"username\", \"\")\n        password = event.get(\"detail\", {}).get(\"password\", \"\")\n        reset_password(username, password)\n\n        return {\"statusCode\": 200, \"body\": json.dumps(event)}\n\n    identity_store_id = (event.get(\"detail\", {}).get(\"requestParameters\", {}).get(\"identityStoreId\", \"\"))\n    user_id = get_user_id(event)\n    if not is_user_in_groups_to_sync(identity_store_id, user_id):\n        return {\"statusCode\": 200, \"body\": json.dumps(event)}\n\n    if event_name == \"DeleteUser\":\n        # User doesn't exist in IAM IDC anymore. Delete the user from AWS managed AD directly\n        delete_user_from_ad_by_user_id(user_id)\n    elif event_name in [\"CreateUser\", \"CreateGroupMembership\", \"UpdateUser\", \"UpdateUserName\"]:\n        # Retrieve user information (username and email) from IAM IDC.\n        identity_store_client = boto3.client(\"identitystore\")\n        user = identity_store_client.describe_user(\n            IdentityStoreId=identity_store_id, UserId=user_id\n        )\n        username = user.get(\"UserName\", \"\").split(\"@\")[0]\n        primary_emails = [\n            email for email in user.get(\"Emails\", []) if email.get(\"Primary\", False)\n        ]\n        email = primary_emails[0].get(\"Value\", \"\") if len(primary_emails) > 0 else \"\"\n\n        existing_username = get_existing_username_by_id(user_id)\n        if not existing_username:\n            # Create the user if not exist\n            add_user_to_ad(username, email, user_id)\n        elif existing_username == username:\n            # Update email if username is unchanged\n            update_email(username, email)\n        else:\n            # replace the existing user if username is changed\n            delete_user_from_ad(existing_username)\n            add_user_to_ad(username, email, user_id)\n\n    return {\"statusCode\": 200, \"body\": json.dumps(event)}\n"
    },
    "Environment": {
     "Variables": {
      "WINDOWS_MANAGEMENT_HOST": {
       "Ref": "WindowsManagementHostInstanceId"
      },
      "ADMIN_USERNAME": {
       "Ref": "ManagedAdAdminUsername"
      },
      "ADMIN_PASSWORD": {
       "Ref": "ManagedAdAdminPassword"
      },
      "USERS_OU": {
       "Ref": "ManagedAdUsersOU"
      },
      "SENDER_EMAIL": {
       "Ref": "SenderEmail"
      },
      "MANAGED_AD_USER_GROUP": {
       "Ref": "ManagedAdUserGroup"
      }
     }
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "ADManagementLambdaRole8266D20F",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 60
   },
   "DependsOn": [
    "ADManagementLambdaRoleDefaultPolicy5B29B7C7",
    "ADManagementLambdaRole8266D20F"
   ],
   "Metadata": {
    "aws:cdk:path": "EntraIdStack/ADManagementLambda/Resource"
   }
  },
  "IDCListenerRule0FC84009": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "EventPattern": {
     "detail": {
      "eventSource": [
       "sso-directory.amazonaws.com"
      ],
      "eventName": [
       "CreateUser",
       "CreateGroupMembership",
       "UpdateUser",
       "UpdateUserName",
       "DeleteUser"
      ]
     },
     "detail-type": [
      "AWS API Call via CloudTrail"
     ],
     "source": [
      "aws.sso-directory"
     ]
    },
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "ADManagementLambda514CFA37",
        "Arn"
       ]
      },
      "Id": "Target0",
      "RetryPolicy": {
       "MaximumEventAgeInSeconds": 7200,
       "MaximumRetryAttempts": 2
      }
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "EntraIdStack/IDCListenerRule/Resource"
   }
  },
  "IDCListenerRuleAllowEventRuleEntraIdStackADManagementLambdaBC216B6074F42078": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ADManagementLambda514CFA37",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "IDCListenerRule0FC84009",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "EntraIdStack/IDCListenerRule/AllowEventRuleEntraIdStackADManagementLambdaBC216B60"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/02Myw6CMBBFv4V9GUUSjWsS1wQ/wJQyxpE+kj40pOm/W4oLVufOnJl7gqa9wLHiX1eLaa4ljRDvnouZdU/dc8sVerQs+0ckriAORuLqCnsjSSzltKTEJFfjxCHeghaejF7dPvdoFTmXp8Twg9q7XBn+lZkpsQGdCVZsq13ujJ7Il89+8S+jDy1coTlXb0dU26A9KYRh4w9AgkAZ2QAAAA=="
   },
   "Metadata": {
    "aws:cdk:path": "EntraIdStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "il-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}