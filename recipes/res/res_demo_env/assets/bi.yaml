Description: A set of external resources that can be integrated into a Research and Engineering Studio Environment

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "AD Configuration"
        Parameters:
          - DomainName
          - AdminPassword
          - ServiceAccountPassword
          - Keypair
          - LDIFS3Path

Parameters:
  DomainName:
    Description: Active Directory Domain Name. The supplied LDIF file which provides bootstrap users uses this domain. A different LDIF file needs to be provided for a different domain.
    Type: String
    Default: corp.res.com
    AllowedPattern: ^([a-zA-Z0-9]+[\\.-])+([a-zA-Z0-9])+$
  PortalDomainName:
    Description: (Optional) Domain Name for web portal domain that lives in Route53 in account (may be different from the Active Directory domain). Used to generate certs, leave blank to skip certificate generation.
    Type: String
  EnvironmentName:
    Description: (Optional) Provide name of the Environment, the name of the environment must start with "res-" and should be less than or equal to 10 characters. (required for generating certificates)
    Type: String
    MaxLength: 10
  AdminPassword:
    Description: Active Directory Administrator Account Password.
    Type: String
    MinLength: 8
    MaxLength: 64
    AllowedPattern: (?=^.{8,64}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9\s])(?=.*[a-z])|(?=.*[^A-Za-z0-9\s])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9\s]))^.*
    NoEcho: true
  ServiceAccountPassword:
    Description: Active Directory Service Account Password.
    Type: String
    MinLength: 8
    MaxLength: 65
    AllowedPattern: (?=^.{8,64}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9\s])(?=.*[a-z])|(?=.*[^A-Za-z0-9\s])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9\s]))^.*
    NoEcho: true
  Keypair:
    Description: EC2 Keypair to access management instance.
    Type: AWS::EC2::KeyPair::KeyName
  LDIFS3Path:
    Description: (Optional) An S3 Path (without the s3://) to an LDIF file that will be used during stack creation.
    Type: String
    Default: aws-hpc-recipes-dev/res/recipes/res/res_demo_env/assets/res.ldif
  ClientIpCidr:
    Description: CIDR for incoming RDP traffic for management instance.
    Default: 127.0.0.1/32
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: ClientIP must be a valid IP or network range of the form x.x.x.x/x. specify your IP/NETMASK (e.g x.x.x/32 or x.x.x.x/24 for subnet range)

Conditions:
  GenerateCerts: !Not [!Equals [!Ref PortalDomainName, '']]
  UseEnvironmentName: !Not [!Equals [!Ref EnvironmentName, '']]

Resources:

##### Nested stacks

  DirectoryService:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        DomainName: !Ref DomainName
        AdminPassword: !Ref AdminPassword
        ServiceAccountPassword: !Ref ServiceAccountPassword
        ServiceAccountName: ServiceAccount
        LDIFS3Path: !Ref LDIFS3Path
        Keypair: !Ref Keypair
        UserName: ''
        UserPassword: ''
        Vpc: !GetAtt [ Networking, Outputs.VPC ]
        PrivateSubnetOne: {"Fn::Select": [0, { "Fn::Split" : [",", !GetAtt [ Networking, Outputs.PrivateSubnets ]] }]}
        PrivateSubnetTwo: {"Fn::Select": [1, { "Fn::Split" : [",", !GetAtt [ Networking, Outputs.PrivateSubnets ]] }]}
      TemplateURL: https://aws-hpc-recipes.s3.us-east-1.amazonaws.com/main/recipes/dir/demo_managed_ad/assets/main.yaml

  Networking:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://aws-hpc-recipes.s3.us-east-1.amazonaws.com/main/recipes/net/hpc_large_scale/assets/main.yaml

  WindowsManagementHost:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        DomainName: !Ref DomainName
        DelegationUser: Admin
        DelegationPassword: !Ref AdminPassword
        DirectoryId: !GetAtt [ DirectoryService, Outputs.DirectoryId ]
        DnsIpAddress1: !GetAtt [ DirectoryService, Outputs.DnsIpAddress1 ]
        DnsIpAddress2: !GetAtt [ DirectoryService, Outputs.DnsIpAddress2 ]
        Keypair: !Ref Keypair
        VpcId: !GetAtt [ Networking, Outputs.VPC ]
        Subnet: {"Fn::Select": [0, { "Fn::Split" : [",", !GetAtt [ Networking, Outputs.PublicSubnets ]] }]}
        ClientIpCidr: !Ref ClientIpCidr
        PSS3Path: aws-hpc-recipes-dev/res/recipes/res/res_demo_env/assets/service_account.ps1
      TemplateURL: https://aws-hpc-recipes.s3.us-east-1.amazonaws.com/main/recipes/dir/demo_managed_ad/assets/windows_management_host.yaml

  Storage:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        VpcId: !GetAtt [ Networking, Outputs.VPC ]
        SubnetIds: !GetAtt [ Networking, Outputs.PrivateSubnets ]
      TemplateURL: https://aws-hpc-recipes.s3.us-east-1.amazonaws.com/main/recipes/storage/efs_simple/assets/main.yaml

  Certs:
    Condition: GenerateCerts
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        SubnetId: {"Fn::Select": [0, { "Fn::Split" : [",", !GetAtt [ Networking, Outputs.PrivateSubnets ]] }]}
        DomainName: !Ref PortalDomainName
      TemplateURL: https://aws-hpc-recipes.s3.us-east-1.amazonaws.com/main/recipes/security/public_certs/assets/main.yaml
      Tags:
        - Key: "res:EnvironmentName"
          Value: !Ref EnvironmentName
        - Key: "res:ModuleName"
          Value: vdc-desktop-controller

##### Custom Operations

  EFSSecurityGroupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: LogOutput
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: '*'
        - PolicyName: EC2DescribeVpcs
          PolicyDocument:
            Statement:
              - Action:
                  - ec2:DescribeVpcs
                Effect: Allow
                Resource: '*'
                  # - !Sub ["arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${VpcID}", VpcID: !GetAtt [ Networking, Outputs.VPC ]]
        - PolicyName: EFSRead
          PolicyDocument:
            Statement:
              - Action:
                  - elasticfilesystem:DescribeFileSystems
                  - elasticfilesystem:DescribeMountTargets
                  - elasticfilesystem:DescribeMountTargetSecurityGroups
                Effect: Allow
                Resource:
                  - !Sub ["arn:${AWS::Partition}:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:file-system/${FSID}", FSID: !GetAtt [ Storage, Outputs.EFSFilesystemId ]]
        - PolicyName: EFSAttribute
          PolicyDocument:
            Statement:
              - Action:
                  - ec2:DescribeNetworkInterfaceAttribute
                Effect: Allow
                Resource:
                  - '*'
        - PolicyName: EC2AddIngressRule
          PolicyDocument:
            Statement:
              - Action:
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:CreateTags
                Effect: Allow
                Resource:
                  - '*'
                    #- !Sub ["arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${SGID}", SGID: !GetAtt [ Storage, Outputs.SecurityGroupId ]]

  EFSSecurityGroupLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "${AWS::StackName}: custom resource handler to finish setting up stack after other resources have been created."
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt EFSSecurityGroupRole.Arn
      Runtime: python3.9
      Timeout: 300
      TracingConfig:
        Mode: Active
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          import logging
          import random
          import string
          import secrets
          import json
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          ec2 = boto3.client("ec2")
          efs = boto3.client("efs")

          def create_physical_resource_id():
              alnum = string.ascii_uppercase + string.ascii_lowercase + string.digits
              return ''.join(random.choice(alnum) for _ in range(16))

          def handler(event, context):
              print(event)
              print( 'boto version {}'.format(boto3.__version__))

              vpc_id = event['ResourceProperties']['VpcId']
              efs_id = event['ResourceProperties']['EfsId']

              response_data = {}
              reason = None
              response_status = cfnresponse.SUCCESS

              if event['RequestType'] == 'Create':
                  response_data['Message'] = 'Resource creation successful!'
                  physical_resource_id = create_physical_resource_id()

                  cidr = ec2.describe_vpcs(VpcIds=[vpc_id])["Vpcs"][0]['CidrBlock']
                  fss = efs.describe_file_systems(FileSystemId=efs_id)

                  mt = efs.describe_mount_targets(FileSystemId=efs_id)["MountTargets"]
                  mt_id = mt[0]['MountTargetId']

                  sg = efs.describe_mount_target_security_groups(MountTargetId=mt_id)["SecurityGroups"][0]
                  ec2.authorize_security_group_ingress(GroupId=sg, CidrIp=cidr, FromPort=2049, ToPort=2049, IpProtocol='tcp', )

              else:
                  physical_resource_id = event['PhysicalResourceId']
              cfnresponse.send(event, context, response_status, response_data, physical_resource_id, reason)

  EFSSecurityGroup:
    Type: Custom::EFSSecurityGroup
    Properties:
      ServiceToken: !GetAtt EFSSecurityGroupLambda.Arn
      VpcId: !GetAtt [ Networking, Outputs.VPC ]
      EfsId: !GetAtt [ Storage, Outputs.EFSFilesystemId ]

Outputs:
  VpcId:
    Value: !GetAtt [ Networking, Outputs.VPC ]
  PrivateSubnets:
    Value: !GetAtt [ Networking, Outputs.PrivateSubnets ]
  PublicSubnets:
    Value: !GetAtt [ Networking, Outputs.PublicSubnets ]
  CertificateSecretArn:
    Description: ARN for a secret that contains the generated certificate.
    Value: !GetAtt [ Certs, Outputs.CertificateArn ]
    Condition: GenerateCerts
  PrivateKeySecretArn:
    Description: ARN for a secret that contains the generated certificate private key.
    Value: !GetAtt [ Certs, Outputs.PrivateKeySecretArn ]
    Condition: GenerateCerts
  EnvironmentName:
    Description: Name of Research and Engineering Studio environment.
    Value: !Ref EnvironmentName
    Condition: UseEnvironmentName
  Keypair:
    Description: Keypair used for management instances
    Value: !Ref Keypair
  ActiveDirectoryName:
    Description: Fully Qualified Domain Name (FQDN) for your Active Directory
    Value: !Ref DomainName
  ADShortName:
    Description: Please provide the short name in Active directory
    Value: !GetAtt [ DirectoryService, Outputs.DomainShortName ]
  LDAPConnectionURI:
    Value: !GetAtt [ DirectoryService, Outputs.DomainAddrLdap ]
  LDAPSConnectionURI:
    Value: !GetAtt [ DirectoryService, Outputs.DomainAddrLdaps ]
  LDAPBase:
    Value: !Sub
      - dc=${dc}
      - { dc: !Join [",dc=", !Split [".", !Ref DomainName ]] }
  RootUserName:
    Value: ServiceAccount
  SharedHomeFilesystemId:
    Value: !GetAtt [ Storage, Outputs.EFSFilesystemId ]
  UsersOU:
    Description: The OU for all users who might join the system. The value provided here is based off of a supplied LDIF file.
    Value: OU=Users,OU=RES,OU=corp,DC=corp,DC=res,DC=com
  GroupsOU:
    Description: The OU for groups that users belong to who might join the system. The value provided here is based off of a supplied LDIF file.
    Value: OU=Users,OU=RES,OU=corp,DC=corp,DC=res,DC=com
  SudoersOU:
    Description: The OU for users who should have sudoers permission across all projects. The value provided here is based off of a supplied LDIF file.
    Value: OU=Users,OU=RES,OU=corp,DC=corp,DC=res,DC=com
  ComputersOU:
    Description: The OU for computers that join the AD. The value provided here is based off of a supplied LDIF file.
    Value: OU=Computers,OU=RES,OU=corp,DC=corp,DC=res,DC=com
