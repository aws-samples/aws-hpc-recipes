Description: Research and Engineering Studio on AWS [version 2024.01] demo environment

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: RES Configuration
        Parameters:
          - EnvironmentName
          - AdministratorEmail
      - Label:
          default: Access Management
        Parameters:
          - Keypair
          - ClientIpCidr
          - AdAdminIpCidr
          - InboundPrefixList
      - Label:
          default: (Optional) Demo Users
        Parameters:
          - DemoUserNameInAd
          - DemoUserPasswordInAd
          - DemoAdminInAd
          - DemoAdminPasswordInAd

Parameters:

  Keypair:
    Description: EC2 Keypair to access management instance.
    Type: AWS::EC2::KeyPair::KeyName
    Default: ""

  EnvironmentName:
    Description: Provide name of the RES Environment. Must be unique for your account and AWS Region.
    Type: String
    Default: res-demo
    MinLength: 5
    MaxLength: 10
    AllowedPattern: ^(?!.*aws)res-[a-z0-9-]{1,6}$
    ConstraintDescription: EnvironmentName must start with "res-", cannot contain "aws", and entire name must be less than or equal to 10 characters (lowercase, numbers, hypens are permitted).

  AdministratorEmail:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$

  ClientIpCidr:
    Description: Default IP(s) allowed to directly access the Web UI and SSH into the bastion host. We recommend that you restrict it with your own IP/subnet (x.x.x.x/32 for your own ip or x.x.x.x/24 for range. Replace x.x.x.x with your own PUBLIC IP. You can get your public IP using tools such as https://ifconfig.co/)
    Default: 0.0.0.0/0
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Value must be a valid IP or network range of the form x.x.x.x/x.

  AdAdminIpCidr:
    Description: Default IP(s) allowed to access the AD admin host(s). We recommend that you restrict it with your own IP/subnet (x.x.x.x/32 for your own ip or x.x.x.x/24 for range. Replace x.x.x.x with your own PUBLIC IP. You can get your public IP using tools such as https://ifconfig.co/)
    Default: 127.0.0.1/32
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Value must be a valid IP or network range of the form x.x.x.x/x.

  InboundPrefixList:
    Description: (Optional) VPC Prefix List for inbound access to Web UI, bastion host, and AD admin host. 
    Default: ""
    Type: String
    AllowedPattern: ^(pl-[a-z0-9]{8,20})?$
    ConstraintDescription: Must be a valid VPC Prefix List ID, which begins with `pl-` or be empty.

  DemoUserNameInAd:
    Description: (Optional) Application user created in the Active Directory.
    Type: String
    Default: ""

  DemoUserPasswordInAd:
    Description: (Optional) Password for DemoUserNameInAd.
    Type: String
    Default: ""
    NoEcho: true

  DemoAdminInAd:
    Description: (Optional) Application user created in the Active Directory and granted RES adminstrator priveleges.
    Type: String
    Default: ""

  DemoAdminPasswordInAd:
    Description: (Optional) Password for DemoAdminInAd.
    Type: String
    Default: ""
    NoEcho: true


Conditions:
  UseEnvironmentName: !Not [!Equals [!Ref EnvironmentName, ""]]

Resources:

  AdminPassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Active Directory Administrator Account Password.
      Name: !Sub [ "res-AdminPassword-${StackName}-${StackId}", {StackName: !Select [1, !Split ['/', !Ref 'AWS::StackId']], StackId: !Select [2, !Split ['/', !Ref 'AWS::StackId']]}]
      GenerateSecretString:
        SecretStringTemplate: '{"username": "Admin"}'
        GenerateStringKey: "password"
        ExcludePunctuation: true
      Tags:
        - Key: res:Deployment
          Value: "true"
        - Key: res:EnvironmentName
          Value: !Ref EnvironmentName
  
  ServiceAccountPassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Active Directory Service Account Password.
      Name: !Sub [ "res-ServiceAccountPassword-${StackName}-${StackId}", {StackName: !Select [1, !Split ['/', !Ref 'AWS::StackId']], StackId: !Select [2, !Split ['/', !Ref 'AWS::StackId']]}]
      GenerateSecretString:
        SecretStringTemplate: '{"username": "ServiceAccount"}'
        GenerateStringKey: "password"
        ExcludePunctuation: true
      Tags:
        - Key: res:Deployment
          Value: "true"
        - Key: res:EnvironmentName
          Value: !Ref EnvironmentName
  
  RESExternal:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        PortalDomainName: ""
        Keypair: !Ref Keypair
        EnvironmentName: !If [UseEnvironmentName, !Ref EnvironmentName, ""]
        AdminPassword: !Ref AdminPassword
        ServiceAccountPassword: !Ref ServiceAccountPassword
        ClientIpCidr: !Ref AdAdminIpCidr
        ClientPrefixList: !Ref InboundPrefixList
        DemoUserNameInAd: !Ref DemoUserNameInAd
        DemoUserPasswordInAd: !Ref DemoUserPasswordInAd
        DemoAdminInAd: !Ref DemoAdminInAd
        DemoAdminPasswordInAd: !Ref DemoAdminPasswordInAd
      TemplateURL: https://aws-hpc-recipes.s3.us-east-1.amazonaws.com/main/recipes/res/res_demo_env/assets/bi.yaml

  RES:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        AdministratorEmail: !Ref AdministratorEmail
        SSHKeyPair: !Ref Keypair
        ClientIp: !Ref ClientIpCidr
        ClientPrefixList: !Ref InboundPrefixList
        CustomDomainNameforWebApp: ""
        ACMCertificateARNforWebApp: ""
        CustomDomainNameforVDI: ""
        PrivateKeySecretARNforVDI: ""
        CertificateSecretARNforVDI: ""
        DomainTLSCertificateSecretArn: ""
        VpcId: !GetAtt [ RESExternal, Outputs.VpcId ]
        LoadBalancerSubnets: !GetAtt [ RESExternal, Outputs.PublicSubnets ]
        InfrastructureHostSubnets: !GetAtt [ RESExternal, Outputs.PrivateSubnets ]
        VdiSubnets: !GetAtt [ RESExternal, Outputs.PrivateSubnets ]
        IsLoadBalancerInternetFacing: "true"
        ActiveDirectoryName: !GetAtt [ RESExternal, Outputs.ActiveDirectoryName ]
        ADShortName: !GetAtt [ RESExternal, Outputs.ADShortName ]
        LDAPBase: !GetAtt [ RESExternal, Outputs.LDAPBase ]
        LDAPConnectionURI: !GetAtt [ RESExternal, Outputs.LDAPConnectionURI ]
        SudoersGroupName: RESAdministrators
        ServiceAccountUsername: !GetAtt [ RESExternal, Outputs.ServiceAccountUsername ]
        ServiceAccountPassword: !Sub "{{resolve:secretsmanager:${ServiceAccountPassword}:SecretString:password}}"
        UsersOU: !GetAtt [ RESExternal, Outputs.UsersOU ]
        GroupsOU: !GetAtt [ RESExternal, Outputs.GroupsOU ]
        SudoersOU: !GetAtt [ RESExternal, Outputs.SudoersOU ]
        ComputersOU: !GetAtt [ RESExternal, Outputs.ComputersOU ]
        SharedHomeFileSystemId: !GetAtt [ RESExternal, Outputs.SharedHomeFilesystemId ]
        InfrastructureHostAMI: ""
        EnableLdapIDMapping: "True"
      TemplateURL: https://research-engineering-studio-us-east-1.s3.amazonaws.com/releases/2024.01/ResearchAndEngineeringStudio.template.json

  LoadBalancerLookupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python3.11
      Timeout: 10
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          
          client = boto3.client("dynamodb")
          
          def handler(event, context):
            try:
              if event.get("RequestType") != "Create":
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                return
            
              table_name = event["ResourceProperties"]["TableName"]
            
              alb_dns_name = client.get_item(
                TableName=table_name,
                Key={"key": {"S": "cluster.load_balancers.external_alb.load_balancer_dns_name"}},
              )
              
              nlb_dns_name = client.get_item(
                TableName=table_name,
                Key={"key": {"S": "vdc.external_nlb.load_balancer_dns_name"}},
              )
              
              response = {
                "ALBDNSName": alb_dns_name["Item"]["value"]["S"],
                "NLBDNSName": nlb_dns_name["Item"]["value"]["S"],
              }
              
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response)
            except Exception as e:
              cfnresponse.send(event, context, cfnresponse.FAILED, {"error": str(e)})
      Role:
        !GetAtt LoadBalancerLookupRole.Arn

  LoadBalancerLookupResource:
    Type: Custom::LoadBalancerLookup
    DependsOn: RES
    Properties:
      ServiceToken: !GetAtt LoadBalancerLookupFunction.Arn
      TableName: !Sub ${EnvironmentName}.cluster-settings

  LoadBalancerLookupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: LoadBalancerLookupRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - "dynamodb:GetItem"
                Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${EnvironmentName}.cluster-settings

