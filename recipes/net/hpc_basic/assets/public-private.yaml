---
AWSTemplateFormatVersion: '2010-09-09'
Description: Create one public and one private subnet. Can create a VPC or use an existing one.

### Stack metadata
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: VPC
        Parameters:
          - VpcCIDR
          - AvailabilityZone
          - VpcId
          - InternetGatewayId
      - Label:
          default: Subnets
        Parameters:
          - PublicCIDR
          - PrivateCIDR
      - Label:
          default: VPC Endpoints
        Parameters:
          - CreateS3Endpoint 
          - CreateDynamoDBEndpoint

Parameters:
  AvailabilityZone:
    Description: "(Optional) Availability Zone in which you want to create your subnet(s). If you opt to create a VPC and do not provide a subnet, one will be selected for you."
    Type: String
  InternetGatewayId:
    Description: "(Optional) The id of the Internet Gateway. Required if using an existing VPC."
    Type: String
    Default: ''
  PrivateCIDR:
    AllowedPattern: "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/(1[6-9]|2[0-9]|3[0-2])$"
    Description: CIDR block for the private subnet
    Default: 10.3.128.0/20
    Type: String
  PublicCIDR:
    AllowedPattern: "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/(1[6-9]|2[0-9]|3[0-2])$"
    Description: CIDR block for the public subnet
    Default: 10.3.0.0/20
    Type: String
  VpcId:
    Description: "(Optional) The VPC to create subnets in. Leave blank to create a new VPC."
    Default: ''
    Type: String
  VpcCIDR:
    Description: "CIDR block for the VPC if it will be created. Required if you opt to create a VPC."
    Default: 10.3.0.0/16
    Type: String
  CreateS3Endpoint:
    AllowedValues:
      - 'True'
      - 'False'
    Default: 'True'
    Description:
      Set to True to create an S3 endpoint in your VPC.
    Type: String
  CreateDynamoDBEndpoint:
    AllowedValues:
      - 'True'
      - 'False'
    Default: 'True'
    Description:
      Set to True to create a DynamoDB endpoint in your VPC.
    Type: String

Conditions:
  CreateInternetGateway:
    Fn::Equals:
    - Ref: InternetGatewayId
    - ''
  CreateVpc:
    Fn::Equals:
    - Ref: VpcId
    - ''
  SpecifyAz: 
    Fn::Not: 
      - Fn::Equals:
        - !Ref AvailabilityZone
        - ""
  ExistingInternetGateway:
    Fn::Not:
    - Fn::Equals:
      - Ref: InternetGatewayId
      - ''
  S3EndpointCondition: !Equals [!Ref 'CreateS3Endpoint', 'True']
  DynamoDBEndpointCondition: !Equals [!Ref 'CreateDynamoDBEndpoint', 'True']

Resources:

  Vpc:
    Condition: CreateVpc
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: "Name"
          Value: !Sub '${AWS::StackName}:Basic-HPC'

  DefaultRouteDependsOnPublic:
    Condition: CreateInternetGateway
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Fn::If:
        - CreateInternetGateway
        - Ref: InternetGateway
        - Ref: InternetGatewayId
      RouteTableId:
        Ref: RouteTablePublic
    Type: AWS::EC2::Route

  DefaultRouteNoDependsOnPublic:
    Condition: ExistingInternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Fn::If:
        - CreateInternetGateway
        - Ref: InternetGateway
        - Ref: InternetGatewayId
      RouteTableId:
        Ref: RouteTablePublic
    Type: AWS::EC2::Route

  InternetGateway:
    Condition: CreateInternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}:InternetGateway'
      - Key: Stack
        Value:
          Ref: AWS::StackId
    Type: AWS::EC2::InternetGateway

  NatEIPPublic:
    Properties:
      Domain: vpc
    Type: AWS::EC2::EIP

  NatGatewayPublic:
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NatEIPPublic
        - AllocationId
      SubnetId:
        Ref: Public
    Type: AWS::EC2::NatGateway

  NatRoutePrivate:
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGatewayPublic
      RouteTableId:
        Ref: RouteTablePrivate
    Type: AWS::EC2::Route

  Private:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::If:
          - SpecifyAz
          - !Ref AvailabilityZone
          - Fn::Select:
              - '0'
              - Fn::GetAZs:
                  Ref: AWS::Region
      CidrBlock:
        Ref: PrivateCIDR
      MapPublicIpOnLaunch: false
      VpcId:
        Fn::If:
        - CreateVpc
        - Ref: Vpc
        - Ref: VpcId
      Tags:
      - Key: Name
        Value: !Sub
          - '${StackName}:PrivateSubnetA-${AvailabilityZone}'
          - StackName: !Ref AWS::StackName
            AvailabilityZone: 
              Fn::If:
                - SpecifyAz
                - !Ref AvailabilityZone
                - Fn::Select:
                    - '0'
                    - Fn::GetAZs:
                        Ref: AWS::Region
  Public:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::If:
          - SpecifyAz
          - !Ref AvailabilityZone
          - Fn::Select:
              - '0'
              - Fn::GetAZs:
                  Ref: AWS::Region
      CidrBlock:
        Ref: PublicCIDR
      MapPublicIpOnLaunch: true
      VpcId:
        Fn::If:
        - CreateVpc
        - Ref: Vpc
        - Ref: VpcId
      Tags:
      - Key: Name
        Value: !Sub
          - '${StackName}:PublicSubnetA-${AvailabilityZone}'
          - StackName: !Ref AWS::StackName
            AvailabilityZone: 
              Fn::If:
                - SpecifyAz
                - !Ref AvailabilityZone
                - Fn::Select:
                    - '0'
                    - Fn::GetAZs:
                        Ref: AWS::Region

  RouteAssociationPrivate:
    Properties:
      RouteTableId:
        Ref: RouteTablePrivate
      SubnetId:
        Ref: Private
    Type: AWS::EC2::SubnetRouteTableAssociation

  RouteAssociationPublic:
    Properties:
      RouteTableId:
        Ref: RouteTablePublic
      SubnetId:
        Ref: Public
    Type: AWS::EC2::SubnetRouteTableAssociation

  RouteTablePrivate:
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}:PrivateRoute'
      VpcId:
        Fn::If:
        - CreateVpc
        - Ref: Vpc
        - Ref: VpcId
    Type: AWS::EC2::RouteTable

  RouteTablePublic:
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}:PublicRoute'
      VpcId:
        Fn::If:
        - CreateVpc
        - Ref: Vpc
        - Ref: VpcId
    Type: AWS::EC2::RouteTable

  VPCGatewayAttachment:
    Condition: CreateInternetGateway
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Fn::If:
        - CreateVpc
        - Ref: Vpc
        - Ref: VpcId
    Type: AWS::EC2::VPCGatewayAttachment

  # Within-VPC security group
  VpcSecurityGroup:
    Condition: CreateVpc
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow all traffic between IPs in VPC
        GroupName: !Sub '${AWS::StackName}-vpc-security-group'
        VpcId: !Ref Vpc
        SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: !Ref VpcCIDR
        SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: !Ref VpcCIDR

  # S3 endpoint
  S3Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Condition: S3EndpointCondition
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - '*'
              Resource:
                - '*'
      VpcEndpointType: Gateway
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      RouteTableIds:
        - !Ref RouteTablePublic
        - !Ref RouteTablePrivate
      VpcId: !If [CreateVpc, !Ref Vpc, !Ref VpcId]

  # DynamoDB endpoint
  DynamoDBEndpoint:
    Condition: DynamoDBEndpointCondition
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - '*'
              Resource:
                - '*'
      VpcEndpointType: Gateway
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'
      RouteTableIds:
        - !Ref RouteTablePublic
        - !Ref RouteTablePrivate
      VpcId: !If [CreateVpc, !Ref Vpc, !Ref VpcId]


Outputs:
  VPC:
    Value:
      Fn::If:
        - CreateVpc
        - Ref: Vpc
        - Ref: VpcId
    Description: ID of the VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC
  PublicSubnets:
    Value: !Join
      - ','
      - - !Ref Public
        - ''
    Description: ID of the public subnets
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnets
  PrivateSubnets:
    Value: !Join
      - ','
      - - !Ref Private
        - ''
    Description: ID of the private subnets
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnets
  DefaultPrivateSubnet:
    Description: The ID of a default private subnet
    Value: !Ref Private
    Export:
      Name: !Sub "${AWS::StackName}-DefaultPrivateSubnet"
  DefaultPublicSubnet:
    Description: The ID of a default public subnet
    Value: !Ref Public
    Export:
      Name: !Sub "${AWS::StackName}-DefaultPublicSubnet"
  InternetGatewayId:
    Description: The ID of the Internet Gateway
    Value: 
      Fn::If:
        - CreateInternetGateway
        - Ref: InternetGateway
        - Ref: InternetGatewayId
    Export:
      Name: !Sub "${AWS::StackName}-InternetGateway"
  SecurityGroup:
    Description: The ID of the local security group
    Value: 
      Fn::If:
        - CreateVpc
        - !Ref VpcSecurityGroup
        - AWS::NoValue
    Export:
      Name: !Sub "${AWS::StackName}-SecurityGroup"
